export class Context {
    constructor(update, api, me) {
        this.update = update;
        this.api = api;
        this.me = me;
    }
    get message() {
        return this.update.message;
    }
    get editedMessage() {
        return this.update.edited_message;
    }
    get channelPost() {
        return this.update.channel_post;
    }
    get editedChannelPost() {
        return this.update.edited_channel_post;
    }
    get inlineQuery() {
        return this.update.inline_query;
    }
    get chosenInlineResult() {
        return this.update.chosen_inline_result;
    }
    get callbackQuery() {
        return this.update.callback_query;
    }
    get shippingQuery() {
        return this.update.shipping_query;
    }
    get preCheckoutQuery() {
        return this.update.pre_checkout_query;
    }
    get poll() {
        return this.update.poll;
    }
    get pollAnswer() {
        return this.update.poll_answer;
    }
    get myChatMember() {
        return this.update.my_chat_member;
    }
    get chatMember() {
        return this.update.chat_member;
    }
    get msg() {
        return (this.message ??
            this.editedMessage ??
            this.callbackQuery?.message ??
            this.channelPost ??
            this.editedChannelPost);
    }
    get chat() {
        return this.msg?.chat;
    }
    get senderChat() {
        return this.msg?.sender_chat;
    }
    get from() {
        return (this.callbackQuery ??
            this.inlineQuery ??
            this.shippingQuery ??
            this.preCheckoutQuery ??
            this.chosenInlineResult ??
            this.msg)?.from;
    }
    get inlineMessageId() {
        return (this.callbackQuery?.inline_message_id ??
            this.chosenInlineResult?.inline_message_id);
    }
    reply(text, other, signal) {
        return this.api.sendMessage(orThrow(this.chat, 'sendMessage').id, text, other, signal);
    }
    forwardMessage(chat_id, other, signal) {
        return this.api.forwardMessage(chat_id, orThrow(this.chat, 'forwardMessage').id, orThrow(this.msg, 'forwardMessage').message_id, other, signal);
    }
    copyMessage(chat_id, other, signal) {
        return this.api.copyMessage(chat_id, orThrow(this.chat, 'copyMessage').id, orThrow(this.msg, 'copyMessage').message_id, other, signal);
    }
    replyWithPhoto(photo, other, signal) {
        return this.api.sendPhoto(orThrow(this.chat, 'sendPhoto').id, photo, other, signal);
    }
    replyWithAudio(audio, other, signal) {
        return this.api.sendAudio(orThrow(this.chat, 'sendAudio').id, audio, other, signal);
    }
    replyWithDocument(document, other, signal) {
        return this.api.sendDocument(orThrow(this.chat, 'sendDocument').id, document, other, signal);
    }
    replyWithVideo(video, other, signal) {
        return this.api.sendVideo(orThrow(this.chat, 'sendVideo').id, video, other, signal);
    }
    replyWithAnimation(animation, other, signal) {
        return this.api.sendAnimation(orThrow(this.chat, 'sendAnimation').id, animation, other, signal);
    }
    replyWithVoice(voice, other, signal) {
        return this.api.sendVoice(orThrow(this.chat, 'sendVoice').id, voice, other, signal);
    }
    replyWithVideoNote(video_note, other, signal) {
        return this.api.sendVideoNote(orThrow(this.chat, 'sendVideoNote').id, video_note, other, signal);
    }
    replyWithMediaGroup(media, other, signal) {
        return this.api.sendMediaGroup(orThrow(this.chat, 'sendMediaGroup').id, media, other, signal);
    }
    replyWithLocation(latitude, longitude, other, signal) {
        return this.api.sendLocation(orThrow(this.chat, 'sendLocation').id, latitude, longitude, other, signal);
    }
    editMessageLiveLocation(latitude, longitude, other, signal) {
        const inlineId = (this.callbackQuery ?? this.chosenInlineResult)
            ?.inline_message_id;
        return inlineId !== undefined
            ? this.api.editMessageLiveLocationInline(inlineId, latitude, longitude, other)
            : this.api.editMessageLiveLocation(orThrow(this.chat, 'editMessageLiveLocation').id, orThrow(this.msg, 'editMessageLiveLocation').message_id, latitude, longitude, other, signal);
    }
    stopMessageLiveLocation(other, signal) {
        const inlineId = (this.callbackQuery ?? this.chosenInlineResult)
            ?.inline_message_id;
        return inlineId !== undefined
            ? this.api.stopMessageLiveLocationInline(inlineId, other)
            : this.api.stopMessageLiveLocation(orThrow(this.chat, 'stopMessageLiveLocation').id, orThrow(this.msg, 'stopMessageLiveLocation').message_id, other, signal);
    }
    replyWithVenue(latitude, longitude, title, address, other, signal) {
        return this.api.sendVenue(orThrow(this.chat, 'sendVenue').id, latitude, longitude, title, address, other, signal);
    }
    replyWithContact(phone_number, first_name, other, signal) {
        return this.api.sendContact(orThrow(this.chat, 'sendContact').id, phone_number, first_name, other, signal);
    }
    replyWithPoll(question, options, other, signal) {
        return this.api.sendPoll(orThrow(this.chat, 'sendPoll').id, question, options, other, signal);
    }
    replyWithDice(emoji, other, signal) {
        return this.api.sendDice(orThrow(this.chat, 'sendDice').id, emoji, other, signal);
    }
    replyWithChatAction(action, signal) {
        return this.api.sendChatAction(orThrow(this.chat, 'sendChatAction').id, action, signal);
    }
    getUserProfilePhotos(other, signal) {
        return this.api.getUserProfilePhotos(orThrow(this.from, 'getUserProfilePhotos').id, other, signal);
    }
    kickAuthor(other, signal) {
        return this.api.kickChatMember(orThrow(this.chat, 'kickChatMember').id, orThrow(this.from, 'kickChatMember').id, other, signal);
    }
    kickChatMember(user_id, other, signal) {
        return this.api.kickChatMember(orThrow(this.chat, 'kickChatMember').id, user_id, other, signal);
    }
    unbanChatMember(user_id, other, signal) {
        return this.api.unbanChatMember(orThrow(this.chat, 'unbanChatMember').id, user_id, other, signal);
    }
    restrictAuthor(permissions, other, signal) {
        return this.api.restrictChatMember(orThrow(this.chat, 'restrictChatMember').id, orThrow(this.from, 'restrictChatMember').id, permissions, other, signal);
    }
    restrictChatMember(user_id, permissions, other, signal) {
        return this.api.restrictChatMember(orThrow(this.chat, 'restrictChatMember').id, user_id, permissions, other, signal);
    }
    promoteAuthor(other, signal) {
        return this.api.promoteChatMember(orThrow(this.chat, 'promoteChatMember').id, orThrow(this.from, 'promoteChatMember').id, other, signal);
    }
    promoteChatMember(user_id, other, signal) {
        return this.api.promoteChatMember(orThrow(this.chat, 'promoteChatMember').id, user_id, other, signal);
    }
    setChatAdministratorAuthorCustomTitle(custom_title, signal) {
        return this.api.setChatAdministratorCustomTitle(orThrow(this.chat, 'setChatAdministratorCustomTitle').id, orThrow(this.from, 'setChatAdministratorCustomTitle').id, custom_title, signal);
    }
    setChatAdministratorCustomTitle(user_id, custom_title, signal) {
        return this.api.setChatAdministratorCustomTitle(orThrow(this.chat, 'setChatAdministratorCustomTitle').id, user_id, custom_title, signal);
    }
    setChatPermissions(permissions, signal) {
        return this.api.setChatPermissions(orThrow(this.chat, 'setChatPermissions').id, permissions, signal);
    }
    exportChatInviteLink(signal) {
        return this.api.exportChatInviteLink(orThrow(this.chat, 'exportChatInviteLink').id, signal);
    }
    createChatInviteLink(other, signal) {
        return this.api.createChatInviteLink(orThrow(this.chat, 'createChatInviteLink').id, other, signal);
    }
    editChatInviteLink(invite_link, other, signal) {
        return this.api.editChatInviteLink(orThrow(this.chat, 'editChatInviteLink').id, invite_link, other, signal);
    }
    revokeChatInviteLink(invite_link, signal) {
        return this.api.revokeChatInviteLink(orThrow(this.chat, 'editChatInviteLink').id, invite_link, signal);
    }
    setChatPhoto(photo, signal) {
        return this.api.setChatPhoto(orThrow(this.chat, 'setChatPhoto').id, photo, signal);
    }
    deleteChatPhoto(signal) {
        return this.api.deleteChatPhoto(orThrow(this.chat, 'deleteChatPhoto').id, signal);
    }
    setChatTitle(title, signal) {
        return this.api.setChatTitle(orThrow(this.chat, 'setChatTitle').id, title, signal);
    }
    setChatDescription(description, signal) {
        return this.api.setChatDescription(orThrow(this.chat, 'setChatDescription').id, description, signal);
    }
    pinChatMessage(message_id, other, signal) {
        return this.api.pinChatMessage(orThrow(this.chat, 'pinChatMessage').id, message_id, other, signal);
    }
    unpinChatMessage(message_id, signal) {
        return this.api.unpinChatMessage(orThrow(this.chat, 'unpinChatMessage').id, message_id, signal);
    }
    unpinAllChatMessages(signal) {
        return this.api.unpinAllChatMessages(orThrow(this.chat, 'unpinAllChatMessages').id, signal);
    }
    leaveChat(signal) {
        return this.api.leaveChat(orThrow(this.chat, 'leaveChat').id, signal);
    }
    getChat(signal) {
        return this.api.getChat(orThrow(this.chat, 'getChat').id, signal);
    }
    getChatAdministrators(signal) {
        return this.api.getChatAdministrators(orThrow(this.chat, 'getChatAdministrators').id, signal);
    }
    getChatMembersCount(signal) {
        return this.api.getChatMembersCount(orThrow(this.chat, 'getChatMembersCount').id, signal);
    }
    getAuthor(signal) {
        return this.api.getChatMember(orThrow(this.chat, 'getChatMember').id, orThrow(this.from, 'getChatMember').id, signal);
    }
    getChatMember(user_id, signal) {
        return this.api.getChatMember(orThrow(this.chat, 'getChatMember').id, user_id, signal);
    }
    setChatStickerSet(sticker_set_name, signal) {
        return this.api.setChatStickerSet(orThrow(this.chat, 'setChatStickerSet').id, sticker_set_name, signal);
    }
    deleteChatStickerSet(signal) {
        return this.api.deleteChatStickerSet(orThrow(this.chat, 'deleteChatStickerSet').id, signal);
    }
    answerCallbackQuery(other, signal) {
        return this.api.answerCallbackQuery(orThrow(this.callbackQuery, 'answerCallbackQuery').id, other, signal);
    }
    editMessageText(text, other, signal) {
        const inlineId = (this.callbackQuery ?? this.chosenInlineResult)
            ?.inline_message_id;
        return inlineId !== undefined
            ? this.api.editMessageTextInline(inlineId, text, other)
            : this.api.editMessageText(orThrow(this.chat, 'editMessageText').id, orThrow(this.msg, 'editMessageText').message_id, text, other, signal);
    }
    editMessageCaption(other, signal) {
        const inlineId = (this.callbackQuery ?? this.chosenInlineResult)
            ?.inline_message_id;
        return inlineId !== undefined
            ? this.api.editMessageCaptionInline(inlineId, other)
            : this.api.editMessageCaption(orThrow(this.chat, 'editMessageCaption').id, orThrow(this.msg, 'editMessageCaption').message_id, other, signal);
    }
    editMessageMedia(media, other, signal) {
        const inlineId = (this.callbackQuery ?? this.chosenInlineResult)
            ?.inline_message_id;
        return inlineId !== undefined
            ? this.api.editMessageMediaInline(inlineId, media, other)
            : this.api.editMessageMedia(orThrow(this.chat, 'editMessageMedia').id, orThrow(this.msg, 'editMessageMedia').message_id, media, other, signal);
    }
    editMessageReplyMarkup(other, signal) {
        const inlineId = (this.callbackQuery ?? this.chosenInlineResult)
            ?.inline_message_id;
        return inlineId !== undefined
            ? this.api.editMessageReplyMarkupInline(inlineId, other)
            : this.api.editMessageReplyMarkup(orThrow(this.chat, 'editMessageReplyMarkup').id, orThrow(this.msg, 'editMessageReplyMarkup').message_id, other, signal);
    }
    stopPoll(other, signal) {
        return this.api.stopPoll(orThrow(this.chat, 'stopPoll').id, orThrow(this.msg, 'stopPoll').message_id, other, signal);
    }
    deleteMessage(signal) {
        return this.api.deleteMessage(orThrow(this.chat, 'deleteMessage').id, orThrow(this.msg, 'deleteMessage').message_id, signal);
    }
    replyWithSticker(sticker, other, signal) {
        return this.api.sendSticker(orThrow(this.chat, 'sendSticker').id, sticker, other, signal);
    }
    answerInlineQuery(results, other, signal) {
        return this.api.answerInlineQuery(orThrow(this.inlineQuery, 'answerInlineQuery').id, results, other, signal);
    }
    replyWithInvoice(title, description, payload, provider_token, start_parameter, currency, prices, other, signal) {
        return this.api.sendInvoice(orThrow(this.chat, 'sendInvoice').id, title, description, payload, provider_token, start_parameter, currency, prices, other, signal);
    }
    answerShippingQuery(ok, other, signal) {
        return this.api.answerShippingQuery(orThrow(this.shippingQuery, 'answerShippingQuery').id, ok, other, signal);
    }
    answerPreCheckoutQuery(ok, other, signal) {
        return this.api.answerPreCheckoutQuery(orThrow(this.preCheckoutQuery, 'answerPreCheckoutQuery').id, ok, other, signal);
    }
    setPassportDataErrors(errors, signal) {
        return this.api.setPassportDataErrors(orThrow(this.from, 'setPassportDataErrors').id, errors, signal);
    }
    replyWithGame(game_short_name, other, signal) {
        return this.api.sendGame(orThrow(this.chat, 'sendGame').id, game_short_name, other, signal);
    }
}
function orThrow(value, method) {
    if (value === undefined)
        throw new Error(`Missing information for API call to ${method}`);
    return value;
}
//# sourceMappingURL=data:application/json;base64,