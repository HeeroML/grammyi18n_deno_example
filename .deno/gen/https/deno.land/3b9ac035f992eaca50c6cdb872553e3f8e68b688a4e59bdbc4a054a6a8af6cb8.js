import { matchFilter } from './filter.ts';
function flatten(mw) {
    return typeof mw === 'function'
        ? mw
        : (ctx, next) => mw.middleware()(ctx, next);
}
function concat(first, andThen) {
    return async (ctx, next) => {
        let nextCalled = false;
        await first(ctx, async () => {
            if (nextCalled)
                throw new Error('`next` already called before!');
            else
                nextCalled = true;
            await andThen(ctx, next);
        });
    };
}
function pass(_ctx, next) {
    return next();
}
const leaf = () => Promise.resolve();
export async function run(middleware, ctx) {
    await middleware(ctx, leaf);
}
export class Composer {
    constructor(...middleware) {
        this.handler =
            middleware.length === 0
                ? pass
                : middleware.map(flatten).reduce(concat);
    }
    middleware() {
        return this.handler;
    }
    use(...middleware) {
        const composer = new Composer(...middleware);
        this.handler = concat(this.handler, flatten(composer));
        return composer;
    }
    on(filter, ...middleware) {
        return this.filter(matchFilter(filter), ...middleware);
    }
    hears(trigger, ...middleware) {
        const trg = triggerFn(trigger);
        return this.on([':text', ':caption']).filter(ctx => {
            const msg = ctx.message ?? ctx.channelPost;
            return match(ctx, msg.text ?? msg.caption, trg);
        }, ...middleware);
    }
    command(command, ...middleware) {
        const atCommands = new Set();
        const noAtCommands = new Set();
        toArray(command).forEach(cmd => {
            if (cmd.startsWith('/')) {
                throw new Error(`Do not include '/' when registering command handlers (use '${cmd.substr(0, 1)}' not '${cmd}')`);
            }
            const set = cmd.indexOf('@') === -1 ? noAtCommands : atCommands;
            set.add(cmd);
        });
        return this.on(':entities:bot_command').filter(ctx => {
            const msg = ctx.message ?? ctx.channelPost;
            const txt = msg.text ?? msg.caption;
            const entities = msg.entities ?? msg.caption_entities;
            return entities.some(e => {
                if (e.type !== 'bot_command')
                    return false;
                if (e.offset !== 0)
                    return false;
                const cmd = txt.substring(1, e.length);
                if (noAtCommands.has(cmd) || atCommands.has(cmd)) {
                    ctx.match = txt.substr(cmd.length + 1);
                    return true;
                }
                const index = cmd.indexOf('@');
                if (index === -1)
                    return false;
                if (noAtCommands.has(cmd.substring(0, index))) {
                    ctx.match = txt.substr(cmd.length + 1);
                    return true;
                }
                return false;
            });
        }, ...middleware);
    }
    callbackQuery(trigger, ...middleware) {
        const trg = triggerFn(trigger);
        return this.on('callback_query:data').filter(ctx => match(ctx, ctx.callbackQuery.data, trg), ...middleware);
    }
    gameQuery(trigger, ...middleware) {
        const trg = triggerFn(trigger);
        return this.on('callback_query:game_short_name').filter(ctx => match(ctx, ctx.callbackQuery.game_short_name, trg), ...middleware);
    }
    inlineQuery(trigger, ...middleware) {
        const trg = triggerFn(trigger);
        return this.on('inline_query').filter(ctx => match(ctx, ctx.inlineQuery.query, trg), ...middleware);
    }
    filter(predicate, ...middleware) {
        const composer = new Composer(...middleware);
        this.branch(predicate, composer, pass);
        return composer;
    }
    drop(predicate, ...middleware) {
        return this.filter((ctx) => !predicate(ctx), ...middleware);
    }
    fork(...middleware) {
        const composer = new Composer(...middleware);
        const fork = flatten(composer);
        this.use((ctx, next) => Promise.all([next(), run(fork, ctx)]));
        return composer;
    }
    lazy(middlewareFactory) {
        return this.use(async (ctx, next) => {
            const middleware = await middlewareFactory(ctx);
            const arr = toArray(middleware);
            await flatten(new Composer(...arr))(ctx, next);
        });
    }
    route(router, routeHandlers, fallback = pass) {
        return this.lazy(async (ctx) => {
            const route = await router(ctx);
            return route === undefined ? [] : routeHandlers[route] ?? fallback;
        });
    }
    branch(predicate, trueMiddleware, falseMiddleware) {
        return this.lazy(ctx => predicate(ctx) ? trueMiddleware : falseMiddleware);
    }
}
function triggerFn(trigger) {
    return toArray(trigger).map(t => typeof t === 'string'
        ? (txt) => (txt === t ? t : null)
        : (txt) => t.exec(txt));
}
function match(ctx, content, triggers) {
    for (const t of triggers) {
        const res = t(content);
        if (res) {
            ctx.match = res;
            return true;
        }
    }
    return false;
}
function toArray(e) {
    return Array.isArray(e) ? e : [e];
}
//# sourceMappingURL=data:application/json;base64,